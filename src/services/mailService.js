const nodemailer = require("nodemailer");
const renderTemplate = require("../emailTemplates/renderer");
const { formattedDate } = require("../utils/formats");
const ApiError = require("../exceptions/api-error");
require("dotenv").config();

// –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ—Ä
const createTransporter = () => {
  return nodemailer.createTransport({
    host: process.env.SMTP_HOST,
    port: parseInt(process.env.SMTP_PORT, 10),
    secure: true,
    auth: {
      user: process.env.SMTP_USER,
      pass: process.env.SMTP_USER_PASSWORD,
    },
    connectionTimeout: 10000,
    greetingTimeout: 10000,
  });
};

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞
const sendMail = async ({ to, subject, text, html }) => {
  const transporter = createTransporter();

  const mailOptions = {
    from: `"MERN Delivery" <${process.env.SMTP_USER}>`,
    to,
    subject,
    text,
    html,
  };

  try {
    await transporter.sendMail(mailOptions);
    console.log(`‚úÖ –ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ ${to}`);
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞ –Ω–∞ ${to}:`, error);
    throw new Error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞");
  }
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–∏—Å–µ–º
const sendNotification = async ({ email, type, data }) => {
  let subject = "";
  let text = "";
  let html = "";

  switch (type) {
    case "confirmEmail": {
      subject = "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–∞—à–µ–π –ø–æ—á—Ç—ã";
      text = `–ü—Ä–∏–≤–µ—Ç, ${data.username}! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É: ${data.confirmationLink}`;
      html = renderTemplate("confirmEmail", {
        username: data.username,
        confirmationLink: data.confirmationLink,
        companyName: "MERN Delivery App",
      });
      break;
    }
    case "resetPassword": {
      subject = "–°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è";
      text = `–ü—Ä–∏–≤–µ—Ç, ${data.username}! –î–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Å—ã–ª–∫–µ: ${data.resetLink}`;
      html = renderTemplate("resetPassword", {
        resetLink: data.resetLink,
        companyName: "MERN Delivery App",
      });
      break;
    }

    case "newOrderUser": {
      subject = "üìù –ù–æ–≤—ã–π –∑–∞–∫–∞–∑";
      html = renderTemplate("newOrderUser", {
        ...data,
        formattedDate: formattedDate(data.createdAt),
      });
      break;
    }

    case "newOrderAdmin": {
      subject = "üìù –ù–æ–≤—ã–π –∑–∞–∫–∞–∑";
      html = renderTemplate("newOrderAdmin", {
        ...data,
        formattedDate: formattedDate(data.createdAt),
      });
      break;
    }

    case "orderCancelledByUser": {
      subject = "üìù –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω";
      html = renderTemplate("orderCancelledByUser", {
        ...data,
        formattedDate: formattedDate(data.createdAt),
      });
      break;
    }

    case "orderPickupReady": {
      //TODO
      subject = "üìù –ó–∞–∫–∞–∑ –≥–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ";
      html = renderTemplate("orderPickupReady", {
        ...data,
        formattedDate: formattedDate(data.createdAt), // TODO –∏–Ω–≤–∞–ª–∏–¥ –¥–∞—Ç–∞ –∏ —Å—ã—Ä—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–µ –≥–¥–µ 
      });
      break;
    }

    case "orderDeliverySent": {
      subject = "üìù –ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω";
      html = renderTemplate("orderDeliverySent", {
        ...data,
        formattedDate: formattedDate(data.createdAt),
      });
      break;
    }

    case "orderCancelledByAdmin": {
      subject = "üìù –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω";
      html = renderTemplate("orderCancelledByAdmin", {
        ...data,
        formattedDate: formattedDate(data.createdAt),
      });
      break;
    }

    case "productArchived": {
      //TODO
      subject = "üìù –ü—Ä–æ–¥—É–∫—Ç –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω";
      html = renderTemplate("productArchived", {
        ...data,
        formattedDate: formattedDate(data.createdAt),
      });
      break;
    }

    case "orderFileUploaded": {
      subject = "üìù –ü—Ä–∏–∫—Ä–µ–ø–∏–ª–∏ –∫ –∑–∞–∫–∞–∑—É —Ñ–∞–π–ª";
      html = renderTemplate("orderFileUploaded", {
        ...data,
        formattedDate: formattedDate(data.updatedAt),
      });
      break;
    }
    
    case "newContact": {
      subject = "üì© –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é";
      html = renderTemplate("newContact", {
        ...data.contactData,
      });
      break;
    }

    default:
      throw ApiError.BadRequest("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è");
  }

  console.log("html", html);

  await sendMail({
    to: email,
    subject,
    text,
    html,
  });

  console.log(`üì® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ "${type}" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ ${email}`);
};

module.exports = {
  sendNotification,
};
